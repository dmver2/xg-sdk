/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains Client Stub implementation for remote web service.
 */

#include "GameService3.hpp"

#include <axis/AxisWrapperAPI.hpp>

using namespace std;

 extern int Axis_DeSerialize_serverShortInfo(serverShortInfo* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_serverShortInfo(serverShortInfo *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_serverShortInfo(serverShortInfo* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_serverShortInfo(serverShortInfo* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_serverShortInfo();

extern int Axis_DeSerialize_protocol(protocol* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_protocol(protocol *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_protocol(protocol* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_protocol(protocol* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_protocol();

extern int Axis_DeSerialize_game(game* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_game(game *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_game(game* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_game(game* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_game();

extern int Axis_DeSerialize_serversRoutine(serversRoutine* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_serversRoutine(serversRoutine *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_serversRoutine(serversRoutine* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_serversRoutine(serversRoutine* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_serversRoutine();

extern int Axis_DeSerialize_serverAddress(serverAddress* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_serverAddress(serverAddress *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_serverAddress(serverAddress* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_serverAddress(serverAddress* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_serverAddress();

extern int Axis_DeSerialize_rule(rule* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_rule(rule *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_rule(rule* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_rule(rule* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_rule();

extern int Axis_DeSerialize_serverUpdateInfo(serverUpdateInfo* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_serverUpdateInfo(serverUpdateInfo *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_serverUpdateInfo(serverUpdateInfo* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_serverUpdateInfo(serverUpdateInfo* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_serverUpdateInfo();

extern int Axis_DeSerialize_playerShortInfo(playerShortInfo* param, IWrapperSoapDeSerializer* pDZ);
extern void* Axis_Create_playerShortInfo(playerShortInfo *Obj, bool bArray = false, int nSize=0);
extern void Axis_Delete_playerShortInfo(playerShortInfo* param, bool bArray = false, int nSize=0);
extern int Axis_Serialize_playerShortInfo(playerShortInfo* param, IWrapperSoapSerializer* pSZ, bool bArray = false);
extern int Axis_GetSize_playerShortInfo();

GameService3::GameService3(const char* pchEndpointUri, AXIS_PROTOCOL_TYPE eProtocol)
:Stub(pchEndpointUri, eProtocol)
{
}

GameService3::GameService3()
:Stub(" ", APTHTTP1_1)
{
	m_pCall->setEndpointURI("http://scilla:9007/game-service/services/GameService3");
}

GameService3::~GameService3()
{
}


/*Methods corresponding to the web service methods*/

/*
 * This method wrap the service method getSupportedGames
 */
game_Array GameService3::getSupportedGames()
{
	game_Array RetArray = {NULL, 0};
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER, NORMAL_CHANNEL)) 
			return RetArray;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("getSupportedGames", "http://scilla:9007/game-service/services/GameService3");
		applyUserPreferences();
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("getSupportedGamesResponse", "http://scilla:9007/game-service/services/GameService3"))
			{
				RetArray = (game_Array&)m_pCall->getCmplxArray((void*) Axis_DeSerialize_game, (void*) Axis_Create_game, (void*) Axis_Delete_game, (void*) Axis_GetSize_game, "getSupportedGamesResponse", Axis_URI_game);
			}
		}
	updateStateAfterResponse();
	m_pCall->unInitialize();
		return RetArray;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(e.what());
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault","http://scilla:9007/game-service/services/GameService3" );
		if(pSoapFault)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(pSoapFault);
		}
		else throw;
	}
}


/*
 * This method wrap the service method getServerRules
 */
rule_Array GameService3::getServerRules(xsd__long Value0)
{
	rule_Array RetArray = {NULL, 0};
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER, NORMAL_CHANNEL)) 
			return RetArray;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("getServerRules", "http://scilla:9007/game-service/services/GameService3");
		applyUserPreferences();
		m_pCall->addParameter((void*)&Value0, "id", XSD_LONG);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("getServerRulesResponse", "http://scilla:9007/game-service/services/GameService3"))
			{
				RetArray = (rule_Array&)m_pCall->getCmplxArray((void*) Axis_DeSerialize_rule, (void*) Axis_Create_rule, (void*) Axis_Delete_rule, (void*) Axis_GetSize_rule, "getServerRulesResponse", Axis_URI_rule);
			}
		}
	updateStateAfterResponse();
	m_pCall->unInitialize();
		return RetArray;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(e.what());
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault","http://scilla:9007/game-service/services/GameService3" );
		if(pSoapFault)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(pSoapFault);
		}
		else throw;
	}
}


/*
 * This method wrap the service method getSessionRules
 */
rule_Array GameService3::getSessionRules(xsd__long Value0, xsd__int Value1)
{
	rule_Array RetArray = {NULL, 0};
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER, NORMAL_CHANNEL)) 
			return RetArray;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("getSessionRules", "http://scilla:9007/game-service/services/GameService3");
		applyUserPreferences();
		m_pCall->addParameter((void*)&Value0, "id", XSD_LONG);
		m_pCall->addParameter((void*)&Value1, "sessionId", XSD_INT);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("getSessionRulesResponse", "http://scilla:9007/game-service/services/GameService3"))
			{
				RetArray = (rule_Array&)m_pCall->getCmplxArray((void*) Axis_DeSerialize_rule, (void*) Axis_Create_rule, (void*) Axis_Delete_rule, (void*) Axis_GetSize_rule, "getSessionRulesResponse", Axis_URI_rule);
			}
		}
	updateStateAfterResponse();
	m_pCall->unInitialize();
		return RetArray;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(e.what());
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault","http://scilla:9007/game-service/services/GameService3" );
		if(pSoapFault)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(pSoapFault);
		}
		else throw;
	}
}


/*
 * This method wrap the service method getServersRoutines
 */
serversRoutine_Array GameService3::getServersRoutines()
{
	serversRoutine_Array RetArray = {NULL, 0};
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER, NORMAL_CHANNEL)) 
			return RetArray;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("getServersRoutines", "http://scilla:9007/game-service/services/GameService3");
		applyUserPreferences();
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("getServersRoutinesResponse", "http://scilla:9007/game-service/services/GameService3"))
			{
				RetArray = (serversRoutine_Array&)m_pCall->getCmplxArray((void*) Axis_DeSerialize_serversRoutine, (void*) Axis_Create_serversRoutine, (void*) Axis_Delete_serversRoutine, (void*) Axis_GetSize_serversRoutine, "getServersRoutinesResponse", Axis_URI_serversRoutine);
			}
		}
	updateStateAfterResponse();
	m_pCall->unInitialize();
		return RetArray;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(e.what());
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault","http://scilla:9007/game-service/services/GameService3" );
		if(pSoapFault)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(pSoapFault);
		}
		else throw;
	}
}


/*
 * This method wrap the service method getServerUpdateInfo
 */
serverUpdateInfo* GameService3::getServerUpdateInfo(xsd__long Value0, xsd__int Value1)
{
	serverUpdateInfo* pReturn = NULL;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER, NORMAL_CHANNEL)) 
			return pReturn;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("getServerUpdateInfo", "http://scilla:9007/game-service/services/GameService3");
		applyUserPreferences();
		m_pCall->addParameter((void*)&Value0, "id", XSD_LONG);
		m_pCall->addParameter((void*)&Value1, "sessionId", XSD_INT);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("getServerUpdateInfoResponse", "http://scilla:9007/game-service/services/GameService3"))
			{
				pReturn = (serverUpdateInfo*)m_pCall->getCmplxObject((void*) Axis_DeSerialize_serverUpdateInfo, (void*) Axis_Create_serverUpdateInfo, (void*) Axis_Delete_serverUpdateInfo,"getServerUpdateInfoResponse", 0);
		}
		}
	updateStateAfterResponse();
	m_pCall->unInitialize();
		return pReturn;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(e.what());
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault","http://scilla:9007/game-service/services/GameService3" );
		if(pSoapFault)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(pSoapFault);
		}
		else throw;
	}
}


/*
 * This method wrap the service method getRegisteredServerShortInfos
 */
serverShortInfo_Array GameService3::getRegisteredServerShortInfos()
{
	serverShortInfo_Array RetArray = {NULL, 0};
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER, NORMAL_CHANNEL)) 
			return RetArray;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("getRegisteredServerShortInfos", "http://scilla:9007/game-service/services/GameService3");
		applyUserPreferences();
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("getRegisteredServerShortInfosResponse", "http://scilla:9007/game-service/services/GameService3"))
			{
				RetArray = (serverShortInfo_Array&)m_pCall->getCmplxArray((void*) Axis_DeSerialize_serverShortInfo, (void*) Axis_Create_serverShortInfo, (void*) Axis_Delete_serverShortInfo, (void*) Axis_GetSize_serverShortInfo, "getRegisteredServerShortInfosResponse", Axis_URI_serverShortInfo);
			}
		}
	updateStateAfterResponse();
	m_pCall->unInitialize();
		return RetArray;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(e.what());
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault","http://scilla:9007/game-service/services/GameService3" );
		if(pSoapFault)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(pSoapFault);
		}
		else throw;
	}
}


/*
 * This method wrap the service method getServerAddressesByGameName
 */
serverAddress_Array GameService3::getServerAddressesByGameName(xsd__string Value0)
{
	serverAddress_Array RetArray = {NULL, 0};
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER, NORMAL_CHANNEL)) 
			return RetArray;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("getServerAddressesByGameName", "http://scilla:9007/game-service/services/GameService3");
		applyUserPreferences();
		m_pCall->addParameter((void*)&Value0, "gameName", XSD_STRING);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("getServerAddressesByGameNameResponse", "http://scilla:9007/game-service/services/GameService3"))
			{
				RetArray = (serverAddress_Array&)m_pCall->getCmplxArray((void*) Axis_DeSerialize_serverAddress, (void*) Axis_Create_serverAddress, (void*) Axis_Delete_serverAddress, (void*) Axis_GetSize_serverAddress, "getServerAddressesByGameNameResponse", Axis_URI_serverAddress);
			}
		}
	updateStateAfterResponse();
	m_pCall->unInitialize();
		return RetArray;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(e.what());
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault","http://scilla:9007/game-service/services/GameService3" );
		if(pSoapFault)
		{
	updateStateAfterResponse();
	m_pCall->unInitialize();
			throw GameService3Service_AxisClientException(pSoapFault);
		}
		else throw;
	}
}

int GameService3::getFaultDetail(char** ppcDetail)
{
	return m_pCall->getFaultDetail(ppcDetail);
}

