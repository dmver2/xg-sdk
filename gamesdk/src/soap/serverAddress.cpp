/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains functions to manipulate complex type serverAddress
 */

#include "serverAddress.hpp"
#include <axis/AxisWrapperAPI.hpp>

/*
 * This static method serialize a serverAddress type of object
 */
int Axis_Serialize_serverAddress(serverAddress* param, IWrapperSoapSerializer* pSZ, bool bArray = false)
{
	if (bArray)
	{
		pSZ->serialize("<", Axis_TypeName_serverAddress, ">", NULL);
	}
	else
	{
		const AxisChar* sPrefix = pSZ->getNamespacePrefix(Axis_URI_serverAddress);
		pSZ->serialize("<", Axis_TypeName_serverAddress, " xsi:type=\"", sPrefix, ":",
			Axis_TypeName_serverAddress, "\" xmlns:", sPrefix, "=\"",
			Axis_URI_serverAddress, "\">", NULL);
	}

	pSZ->serializeAsElement("host", (void*)&(param->host), XSD_STRING);
	pSZ->serializeAsElement("port", (void*)&(param->port), XSD_INT);

	pSZ->serialize("</", Axis_TypeName_serverAddress, ">", NULL);
	return AXIS_SUCCESS;
}

/*
 * This static method deserialize a serverAddress type of object
 */
int Axis_DeSerialize_serverAddress(serverAddress* param, IWrapperSoapDeSerializer* pIWSDZ)
{
	param->host = pIWSDZ->getElementAsString("host",0);
	param->port = pIWSDZ->getElementAsInt("port",0);
	return pIWSDZ->getStatus();
}
void* Axis_Create_serverAddress(serverAddress* pObj, bool bArray = false, int nSize=0)
{
	if (bArray && (nSize > 0))
	{
		if (pObj)
		{
			serverAddress* pNew = new serverAddress[nSize];
			memcpy(pNew, pObj, sizeof(serverAddress)*nSize/2);
			memset(pObj, 0, sizeof(serverAddress)*nSize/2);
			delete [] pObj;
			return pNew;
		}
		else
		{
			return new serverAddress[nSize];
		}
	}
	else
		return new serverAddress;
}

/*
 * This static method delete a serverAddress type of object
 */
void Axis_Delete_serverAddress(serverAddress* param, bool bArray = false, int nSize=0)
{
	if (bArray)
	{
		delete [] param;
	}
	else
	{
		delete param;
	}
}
/*
 * This static method gives the size of serverAddress type of object
 */
int Axis_GetSize_serverAddress()
{
	return sizeof(serverAddress);
}

serverAddress::serverAddress()
{
	/*do not allocate memory to any pointer members here
	 because deserializer will allocate memory anyway. */
	memset( &host, 0, sizeof( xsd__string));
	memset( &port, 0, sizeof( xsd__int));
}

serverAddress::~serverAddress()
{
	/*delete any pointer and array members here*/
}
