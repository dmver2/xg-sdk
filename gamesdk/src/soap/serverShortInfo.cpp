/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains functions to manipulate complex type serverShortInfo
 */

#include "serverShortInfo.hpp"
#include <axis/AxisWrapperAPI.hpp>

/*
 * This static method serialize a serverShortInfo type of object
 */
int Axis_Serialize_serverShortInfo(serverShortInfo* param, IWrapperSoapSerializer* pSZ, bool bArray = false)
{
	if (bArray)
	{
		pSZ->serialize("<", Axis_TypeName_serverShortInfo, ">", NULL);
	}
	else
	{
		const AxisChar* sPrefix = pSZ->getNamespacePrefix(Axis_URI_serverShortInfo);
		pSZ->serialize("<", Axis_TypeName_serverShortInfo, " xsi:type=\"", sPrefix, ":",
			Axis_TypeName_serverShortInfo, "\" xmlns:", sPrefix, "=\"",
			Axis_URI_serverShortInfo, "\">", NULL);
	}

	pSZ->serializeAsElement("active", (void*)&(param->active), XSD_BOOLEAN);
	pSZ->serializeAsElement("currentPlayer", (void*)&(param->currentPlayer), XSD_INT);
	pSZ->serializeAsElement("gameID", (void*)&(param->gameID), XSD_LONG);
	pSZ->serializeAsElement("host", (void*)&(param->host), XSD_STRING);
	pSZ->serializeAsElement("id", (void*)&(param->id), XSD_LONG);
	pSZ->serializeAsElement("map", (void*)&(param->map), XSD_STRING);
	pSZ->serializeAsElement("maxPlayer", (void*)&(param->maxPlayer), XSD_INT);
	pSZ->serializeAsElement("name", (void*)&(param->name), XSD_STRING);
	pSZ->serializeAsElement("port", (void*)&(param->port), XSD_INT);
	pSZ->serializeAsElement("regime", (void*)&(param->regime), XSD_STRING);
	pSZ->serializeAsElement("sessionId", (void*)&(param->sessionId), XSD_INT);
	pSZ->serializeAsElement("sessionName", (void*)&(param->sessionName), XSD_STRING);
	pSZ->serializeAsElement("status", (void*)&(param->status), XSD_LONG);

	pSZ->serialize("</", Axis_TypeName_serverShortInfo, ">", NULL);
	return AXIS_SUCCESS;
}

/*
 * This static method deserialize a serverShortInfo type of object
 */
int Axis_DeSerialize_serverShortInfo(serverShortInfo* param, IWrapperSoapDeSerializer* pIWSDZ)
{
	param->active = pIWSDZ->getElementAsBoolean("active",0);
	param->currentPlayer = pIWSDZ->getElementAsInt("currentPlayer",0);
	param->gameID = pIWSDZ->getElementAsLong("gameID",0);
	param->host = pIWSDZ->getElementAsString("host",0);
	param->id = pIWSDZ->getElementAsLong("id",0);
	param->map = pIWSDZ->getElementAsString("map",0);
	param->maxPlayer = pIWSDZ->getElementAsInt("maxPlayer",0);
	param->name = pIWSDZ->getElementAsString("name",0);
	param->port = pIWSDZ->getElementAsInt("port",0);
	param->regime = pIWSDZ->getElementAsString("regime",0);
	param->sessionId = pIWSDZ->getElementAsInt("sessionId",0);
	param->sessionName = pIWSDZ->getElementAsString("sessionName",0);
	param->status = pIWSDZ->getElementAsLong("status",0);
	return pIWSDZ->getStatus();
}
void* Axis_Create_serverShortInfo(serverShortInfo* pObj, bool bArray = false, int nSize=0)
{
	if (bArray && (nSize > 0))
	{
		if (pObj)
		{
			serverShortInfo* pNew = new serverShortInfo[nSize];
			memcpy(pNew, pObj, sizeof(serverShortInfo)*nSize/2);
			memset(pObj, 0, sizeof(serverShortInfo)*nSize/2);
			delete [] pObj;
			return pNew;
		}
		else
		{
			return new serverShortInfo[nSize];
		}
	}
	else
		return new serverShortInfo;
}

/*
 * This static method delete a serverShortInfo type of object
 */
void Axis_Delete_serverShortInfo(serverShortInfo* param, bool bArray = false, int nSize=0)
{
	if (bArray)
	{
		delete [] param;
	}
	else
	{
		delete param;
	}
}
/*
 * This static method gives the size of serverShortInfo type of object
 */
int Axis_GetSize_serverShortInfo()
{
	return sizeof(serverShortInfo);
}

serverShortInfo::serverShortInfo()
{
	/*do not allocate memory to any pointer members here
	 because deserializer will allocate memory anyway. */
	memset( &active, 0, sizeof( xsd__boolean));
	memset( &currentPlayer, 0, sizeof( xsd__int));
	memset( &gameID, 0, sizeof( xsd__long));
	memset( &host, 0, sizeof( xsd__string));
	memset( &id, 0, sizeof( xsd__long));
	memset( &map, 0, sizeof( xsd__string));
	memset( &maxPlayer, 0, sizeof( xsd__int));
	memset( &name, 0, sizeof( xsd__string));
	memset( &port, 0, sizeof( xsd__int));
	memset( &regime, 0, sizeof( xsd__string));
	memset( &sessionId, 0, sizeof( xsd__int));
	memset( &sessionName, 0, sizeof( xsd__string));
	memset( &status, 0, sizeof( xsd__long));
}

serverShortInfo::~serverShortInfo()
{
	/*delete any pointer and array members here*/
}
